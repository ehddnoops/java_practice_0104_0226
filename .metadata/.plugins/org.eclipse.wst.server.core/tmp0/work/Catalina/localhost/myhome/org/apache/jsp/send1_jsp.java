/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.43
 * Generated at: 2021-02-26 08:51:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class send1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- \r\n");
      out.write("서버로 정보를 전송하는 방법\r\n");
      out.write("header:내가 어떤 방법으로 어떤 브라우저로 정당한권한을 갖고 있는지...에 대해서 미리 보낸다.\r\n");
      out.write("body:실제 정보를 보낸다. 파일 전송\r\n");
      out.write("1.GET : header만 보낸다. 1000byte를 넘어가는 정보를 못보낸다.\r\n");
      out.write("\t\t한글은 원래 깨졌다. 그래서 브라우저 url에 보내는 모든 정보가 한눈에 보인다.\r\n");
      out.write("\t\t그래서 보안을 요하는 정보는 get방식으로 보내지 않는다\r\n");
      out.write("2.POST :header와 body정보에 실제 보내는 데이터를 담아서 보낸다. \r\n");
      out.write("\t\t사실상 보내는 데이터 양에 제한이 없지만 20M~50M를 안넘어가야한다\r\n");
      out.write("\t\t그거 넘어가는 정보 보내려면 http프로토콜이 아니라 FTP프로토콜로 보내야 한다\r\n");
      out.write(" \r\n");
      out.write(" form 태그안에 있는 태그중에 name속성이 있어야 서버로 값을 전달한다\r\n");
      out.write(" <form>\r\n");
      out.write(" <form>\r\n");
      out.write(" \r\n");
      out.write(" </form>\r\n");
      out.write(" </form>\r\n");
      out.write(" 아무데이터도 안감 이렇게 쓰면 ->> 브라우저에서 f12 엘리먼츠에 가서 보면 오류가 보일것\r\n");
      out.write(" \r\n");
      out.write(" 폼을 여러개 쓰고 싶다면 아래처럼 / 각form을 구분하고 싶으면 이름 또는 id를 통해 접근가능\r\n");
      out.write(" <form></form>\r\n");
      out.write(" <form></form>\r\n");
      out.write(" \r\n");
      out.write("  \r\n");
      out.write(" name --폼의 이름 \r\n");
      out.write(" id -- jquery가 이걸 많이 씀\r\n");
      out.write(" action -- 응답을 처리할 url, 서블릿일수도 있고 jsp일 수도 있다.\r\n");
      out.write(" method -- 정보를 보내는 방식, 아무말도 안쓰면 기본이 GET방식\r\n");
      out.write(" \r\n");
      out.write(" -->\r\n");
      out.write("<form name=\"myform\">\r\n");
      out.write("\tx: <input type=\"text\" name=\"xvalue\"> <br/>\r\n");
      out.write("\ty: <input type=\"text\" name=\"xvalue\"> <br/>\r\n");
      out.write("\t\r\n");
      out.write("\t<input type=\"button\" value=\"보내기\" onclick=\"goSend()\"/>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("<script>\r\n");
      out.write("function goSend()\r\n");
      out.write("{\r\n");
      out.write("\tvar frm = document.myform;// form의 name속성을 변수처럼,\r\n");
      out.write("\tvar frm = document.forms[0];// form라는 배열을 무조건 갖고 있다. 배열로 사용 index 사용불가\r\n");
      out.write("\tfrm.action=\"receive.jsp\";\r\n");
      out.write("\tfrm.submit();//이 함수가 서버로 정보를 전송한다.\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
